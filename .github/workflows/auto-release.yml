name: Auto Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-release:
    name: Auto Release on Renovate Merge
    runs-on: self-hosted
    steps:
      - name: Check if Renovate commit
        id: check_renovate
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -q "Co-authored-by: Renovate Bot"; then
            echo "is_renovate=true" >> $GITHUB_OUTPUT
          else
            echo "is_renovate=false" >> $GITHUB_OUTPUT
          fi
      
      - uses: actions/checkout@v4
        if: steps.check_renovate.outputs.is_renovate == 'true'
        with:
          fetch-depth: 0
          token: ${{ secrets.RENOVATE_TOKEN }}
      
      - name: Get latest version and increment
        if: steps.check_renovate.outputs.is_renovate == 'true'
        id: version
        run: |
          latest_tag=$(git tag | grep "^v" | sort -V | tail -1)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            version_number=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version_number"
            new_patch=$((patch + 1))
            new_version="v${major}.${minor}.${new_patch}"
          fi
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
      
      - name: Create tag and release
        if: steps.check_renovate.outputs.is_renovate == 'true'
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$new_version" -m "Release $new_version"
          git push origin "$new_version"
          
          cat <<EOF > release_notes.txt
          **Automated dependency update release**
          
          $(git log -1 --pretty=%B)
          EOF
          
          gh release create "$new_version" \
            --title "$new_version" \
            --notes-file release_notes.txt
        env:
          GH_TOKEN: ${{ secrets.RENOVATE_TOKEN }}
      
      - name: Close failed Renovate PRs
        if: steps.check_renovate.outputs.is_renovate == 'true'
        run: |
          gh pr list --author "renovate[bot]" --state open --json number,statusCheckRollup --jq '.[] | select(.statusCheckRollup[]? | select(.status == "FAILURE" or .conclusion == "FAILURE")) | .number' | while read pr; do
            if [ -n "$pr" ]; then
              gh pr close $pr --comment "Auto-closed: subsequent dependency update merged successfully, indicating upstream fix or superseded update"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.RENOVATE_TOKEN }}
